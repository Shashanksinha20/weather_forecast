{"version":3,"sources":["Weather/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["App","range","useState","info","setInfo","city","setCity","isLoaded","setLoaded","moreInfo","setMoreInfo","name","setName","className","id","dt","type","value","placeholder","onChange","event","target","onClick","length","axios","get","then","res","sunset1","moment","utc","data","sys","sunset","timezone","format","sunrise1","sunrise","now","add","unix","isDay","catch","err","console","log","xmlns","width","height","fill","viewBox","d","country","Math","round","main","temp","weather","feels_like","temp_max","temp_min","wind","speed","humidity","visibility","pressure","fallback","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db6f517a.chunk.js","sourcesContent":["import React, {useState } from \"react\";\nimport \"./Weather.css\";\nimport axios from 'axios'\nimport 'weather-icons/css/weather-icons.css';\n// import \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"\nimport \"../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport moment from \"moment\";\n\nfunction App() {\n  const [info, setInfo] = useState({});\n  const [city, setCity] = useState(\"\");\n  const [isLoaded, setLoaded] = useState(false);\n  const [moreInfo, setMoreInfo] = useState(false);\n  const [name, setName] = useState(\"More Info\")\n\n  const cityHandler = (event) => {\n    setCity(event.target.value);\n  };\n\n  const buttonHandler = () => {\n    if (city.length > 0) {\n      axios\n        .get(\n          `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=97a75dd0b67f33988487b2faa41e6476`\n        )\n        .then((res) => {\n          //setting time with momemt.js\n\n          const sunset1 = moment\n            .utc((res.data.sys.sunset + res.data.timezone) * 1000)\n            .format(\"hh:mm A\");\n          const sunrise1 = moment\n            .utc((res.data.sys.sunrise + res.data.timezone) * 1000)\n            .format(\"hh:mm A\");\n\n          res.data.sunrise = sunrise1;\n          res.data.sunset = sunset1;\n          const now = moment(res.data.dt * 1000)\n            .add(res.data.timezone, \"seconds\")\n            .unix();\n\n          const sunrise = moment\n            .utc((res.data.sys.sunrise + res.data.timezone) * 1000)\n            .unix();\n          const sunset = moment\n            .utc((res.data.sys.sunset + res.data.timezone) * 1000)\n            .unix();\n          const isDay = now < sunrise || now > sunset ? false : true;\n          res.data.isDay = isDay;\n          // console.log({ now, sunset, sunrise, isDay });\n          res.data.dt = moment\n            .utc()\n            .add(res.data.timezone, \"seconds\")\n            .format(\"hh : mm A\");\n          //time part ends\n          setInfo(res.data);\n          setLoaded(true);\n          // console.log(res.data);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  const moreInfoHandler = () => {\n    setMoreInfo(!moreInfo);\n    if(moreInfo === true){\n      setName(\"More Info\")\n    }\n    else\n    {\n      setName(\"Close\")\n    }\n    \n    // console.log(moreInfo);\n  };\n\n  const conditionHandler = (range) => {\n    if (info.isDay) {\n      if (range >= 200 && range <= 232) {\n        return <i className=\"wi wi-day-thunderstorm display-1\"></i>;\n      } else if (range >= 300 && range <= 321) {\n        return <i className=\"wi wi-day-showers display-1\"></i>;\n      } else if (range >= 500 && range <= 531) {\n        return <i className=\"wi wi-day-rain display-1\"></i>;\n      } else if (range >= 600 && range <= 622) {\n        return <i className=\"wi wi-day-snow display-1\"></i>;\n      } else if (range >= 701 && range <= 781) {\n        return <i className=\"wi wi-day-haze display-1\"></i>;\n      } else if (range >= 801 && range <= 804) {\n        return <i className=\"wi wi-day-cloudy display-1\"></i>;\n      } else {\n        return <i className=\"wi wi-day-sunny display-1\"></i>;\n      }\n    } else {\n      if (range >= 200 && range <= 232) {\n        return <i className=\"wi wi-night-thunderstorm display-1\"></i>;\n      } else if (range >= 300 && range <= 321) {\n        return <i className=\"wi wi-night-showers display-1\"></i>;\n      } else if (range >= 500 && range <= 531) {\n        return <i className=\"wi wi-night-rain display-1\"></i>;\n      } else if (range >= 600 && range <= 622) {\n        return <i className=\"wi wi-night-snow display-1\"></i>;\n      } else if (range >= 701 && range <= 781) {\n        return <i className=\"wi wi-night-fog display-1\"></i>;\n      } else if (range >= 801 && range <= 804) {\n        return <i className=\"wi wi-night-cloudy display-1\"></i>;\n      } else {\n        return <i className=\"wi wi-night-clear display-1\"></i>;\n      }\n    }\n  };\n\n  return (\n    <>\n      <div className=\"App\">\n        <div>\n          <section className=\"header\">\n            <div></div>\n            <div>\n              <h1>Weather Forecast</h1>\n            </div>\n            <div id = \"blue\">\n              <h2>{info.dt}</h2>\n            </div>\n          </section>\n\n          <input\n            className=\"input\"\n            type=\"text\"\n            value={city}\n            placeholder=\"Search City\"\n            onChange={cityHandler}\n          />\n          <button className=\"button\" onClick={buttonHandler}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"20\"\n              height=\"20\"\n              fill=\"currentColor\"\n              className=\"bi bi-search\"\n              viewBox=\"0 0 16 16\"\n            >\n              <path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z\" />\n            </svg> Get Weather\n          </button>\n          <br />\n        </div>\n\n        {isLoaded ? (\n          <div className=\"report\">\n            <br />\n            <h2>\n              {info.name}, {info.sys.country}\n            </h2>\n            <h1 className=\"text-size\">\n              {Math.round(info.main.temp - 273.15)}\n              <sup>o</sup>C\n            </h1>\n            <h2>\n              <i>{info.weather[0].main}</i>\n            </h2>\n            <div>{conditionHandler(info.weather[0].id)}</div>\n            <br />\n            <h3>\n              Feels Like {Math.round(info.main.feels_like - 273.15)}\n              <sup>o</sup> | HI {Math.round(info.main.temp_max - 273.15)}\n              <sup>o</sup> / LO {Math.round(info.main.temp_min - 273.15)}\n              <sup>o</sup>\n            </h3>\n            <div className=\"moreInfo report\" onClick={moreInfoHandler}>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"16\"\n                height=\"16\"\n                fill=\"currentColor\"\n                className=\"bi bi-info-circle-fill\"\n                viewBox=\"0 0 16 16\"\n              >\n                <path d=\"M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z\" />\n              </svg>\n              &ensp;{name}\n            </div>\n            <div>\n              {moreInfo === true ? (\n                <section className=\"moreInfoContainer blue\">\n                  <div>\n                    <p>\n                      <b>Wind: {Math.round(info.wind.speed * 2.236936)}mph</b>\n                    </p>\n                  </div>\n                  <div>\n                    <p>\n                      <b>Humidity : {info.main.humidity}%</b>\n                    </p>\n                  </div>\n                  <div>\n                    <p>\n                      <b>\n                        Visibility :{\" \"}\n                        {Math.round(info.visibility * 0.00062137119224)}mi\n                      </b>\n                    </p>\n                  </div>\n                  <div>\n                    <p>\n                      <b>Sunrise : {info.sunrise}</b>\n                    </p>\n                  </div>\n                  <div>\n                    <p>\n                      <b>Sunset : {info.sunset}</b>\n                    </p>\n                  </div>\n                  <div>\n                    <p>\n                      <b>Pressure : {info.main.pressure} hPa</b>\n                    </p>\n                  </div>\n                </section>\n              ) : (\n                <></>\n              )}\n            </div>\n          </div>\n        ) : (\n          <></>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default App\n","import React, { Suspense } from 'react'\nimport Weather from \"./Weather/Weather\";\n\nfunction App() {\n    return (\n      <div>\n        <Suspense fallback = {<></>}>\n          <Weather />\n        </Suspense>\n      </div>\n    );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}